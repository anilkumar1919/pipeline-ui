(self.webpackChunkpipeline_ui_website=self.webpackChunkpipeline_ui_website||[]).push([[4051],{72311:function(t,n,e){"use strict";e.r(n),e.d(n,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return d},BrowserOnlyChart:function(){return h},BrowserOnlyChart2:function(){return f},toc:function(){return m},default:function(){return y}});var l=e(87462),a=e(63366),r=(e(67294),e(3905)),o=(e(35666),e(10748)),s=e(55182),i=e(25108),p=["components"],u={},c="PipeChart",d={unversionedId:"AlgoComponents/PipeChart",id:"AlgoComponents/PipeChart",title:"PipeChart",description:"A powerfull wrapping of React ApexCharts that automatically fetches, parses and plots data.",source:"@site/docs/AlgoComponents/PipeChart.mdx",sourceDirName:"AlgoComponents",slug:"/AlgoComponents/PipeChart",permalink:"/docs/AlgoComponents/PipeChart",editUrl:"https://github.com/headline-design/pipeline-ui/blob/main/design-site/docs/AlgoComponents/PipeChart.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MultiWalletConnect",permalink:"/docs/AlgoComponents/MultiWalletConnect"},next:{title:"SwitchNet",permalink:"/docs/AlgoComponents/switchnet"}};function h(){return(0,r.kt)(o.Z,{fallback:(0,r.kt)("p",null,"Some Fallback Content"),mdxType:"BrowserOnly"},(function(){var t=e(81688).ht;return(0,r.kt)(t,{width:"100%",mdxType:"PipeChart"})}))}function f(){return(0,r.kt)(o.Z,{fallback:(0,r.kt)("p",null,"Some Fallback Content"),mdxType:"BrowserOnly"},(function(){var t=e(81688).ht;return(0,r.kt)(t,{width:"100%",url:"https://indexer.algoexplorerapi.io/stats/v2/accounts/rich-list?limit=10&asset-id=137594422",parseFunction:function(t){var n=t["asset-total"],e=0,l=[],a=[];return t.accounts.forEach((function(t){a.push(t.address),l.push(parseInt(t.balance)),e+=parseInt(t.balance)})),l.push(n-e),a.push("Misc"),i.log(l),i.log(a),[l,a]},type:"pie",options:{title:{text:"HDL Rich List",align:"center"},chart:{type:"pie"},legend:{show:!0,position:"bottom"},plotOptions:{pie:{dataLabels:{offset:-30}}}},interval:1e5,mdxType:"PipeChart"})}))}var k,m=[{value:"Usage Example (for 2-series area chart)",id:"usage-example-for-2-series-area-chart",children:[],level:2},{value:"Usage Example (for pie chart)",id:"usage-example-for-pie-chart",children:[{value:"Props",id:"props",children:[],level:3}],level:2}],g=(k="PipeChart",{BrowserOnlyChart:h,BrowserOnlyChart2:f,toc:m});function y(t){var n=t.components,e=(0,a.Z)(t,p);return(0,r.kt)("wrapper",(0,l.Z)({},g,e,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pipechart"},"PipeChart"),(0,r.kt)("p",null,"A powerfull wrapping of React ApexCharts that automatically fetches, parses and plots data."),(0,r.kt)(h,{mdxType:"BrowserOnlyChart"}),(0,r.kt)(f,{mdxType:"BrowserOnlyChart2"}),(0,r.kt)("h2",{id:"usage-example-for-2-series-area-chart"},"Usage Example (for 2-series area chart)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const myUrl = 'https://indexer.algoexplorerapi.io/stats/v2/movements?time-start=1638618727&interval=6H&asset-id=137594422'\n\nmyParseFunction(data){\n  let series1 = []\n  let series2 = []\n  let i = false\n  data.data.forEach(point => {\n    i = !i\n    if (i) {\n      series1.push(parseInt(point['tx-count']))\n      series2.push(parseInt(point.volume))\n    }\n  })\n  return [\n    { name: 'Transactions', type: 'area', data: series1 },\n    { name: 'Volume', type: 'bar', color: '#3a904f', data: series2 },\n  ]\n}\n\nconst myOptions = {\n  chart: {\n    background: 'white',\n    type: 'line',\n    stacked: false,\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  stroke: {\n    width: [3, 3, 3],\n  },\n  title: {\n    text: 'Algorand Blockchain Statistics',\n    align: 'left',\n    offsetX: 110,\n  },\n  xaxis: {\n    categories: [],\n    labels: {\n      hideOverlappingLabels: true,\n      rotate: 0,\n      style: {\n        colors: 'black',\n      },\n    },\n  },\n  yaxis: [\n    {\n      axisTicks: {\n        show: true,\n      },\n      axisBorder: {\n        show: true,\n        color: '#008FFB',\n      },\n      labels: {\n        style: {\n          colors: '#008FFB',\n        },\n      },\n      title: {\n        text: 'Transaction Count',\n        style: {\n          color: '#008FFB',\n        },\n      },\n      tooltip: {\n        enabled: true,\n      },\n    },\n    {\n      seriesName: 'Volume',\n      opposite: true,\n      axisTicks: {\n        show: true,\n      },\n      axisBorder: {\n        show: true,\n        color: 'black',\n      },\n      labels: {\n        style: {\n          colors: 'black',\n        },\n      },\n      title: {\n        text: 'Unit Volume',\n        style: {\n          color: 'black',\n        },\n      },\n    },\n  ],\n  tooltip: {\n    fixed: {\n      enabled: true,\n      position: 'topLeft', // topRight, topLeft, bottomRight, bottomLeft\n      offsetY: 30,\n      offsetX: 60,\n    },\n  },\n  legend: {\n    horizontalAlign: 'left',\n    offsetX: 40,\n  },\n}\n\n<PipeChart \n  options={myOptions}\n  parseFunction={myParseFunction}\n  url={myUrl}\n  interval={5000}\n/>\n")),(0,r.kt)("h2",{id:"usage-example-for-pie-chart"},"Usage Example (for pie chart)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'  const myUrl = \'https://indexer.algoexplorerapi.io/stats/v2/accounts/rich-list?limit=10&asset-id=137594422\'\n  \n  const myOptions = {\n    title: {\n      text: \'HDL Rich List\',\n      align: \'center\'\n    },\n    chart:{\n      type:"pie"\n      },\n        legend: {\n          show: true,\n          position: "bottom"\n        },\n        plotOptions: {\n          pie: {\n            dataLabels: {\n               offset: -30 \n            } \n          } \n        }\n      }\n\n  function myParseFunction(data){\n    let total = data["asset-total"]\n    let totalShown = 0;\n    let series1 = []\n    let nlabels = []\n    data.accounts.forEach(point => {\n      nlabels.push(point.address)\n      series1.push(parseInt(point.balance));\n      totalShown += parseInt(point.balance)\n    })\n      series1.push(total - totalShown)\n      nlabels.push("Misc")\n      console.log(series1)\n      console.log(nlabels)\n      return [series1,nlabels]\n      }\n\nreturn(\n<PipeChart\n  width="100%"\n  url={myUrl}\n  parseFunction={myParseFunction}\n  type="pie"\n  options={myOptions}\n  interval={100000}\n/>\n)\n')),(0,r.kt)("h3",{id:"props"},"Props"),(0,r.kt)(s.Z,{mdxType:"Table"},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Prop"),(0,r.kt)("th",null,"Type"),(0,r.kt)("th",null,"Default"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"options"),(0,r.kt)("td",null,"object"),(0,r.kt)("td",null),(0,r.kt)("td",null,"object containing ApexCharts specified options")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"series"),(0,r.kt)("td",null,"array"),(0,r.kt)("td",null),(0,r.kt)("td",null,"array containing ApexCharts specified series objects")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"interval"),(0,r.kt)("td",null,"integer"),(0,r.kt)("td",null,"20000"),(0,r.kt)("td",null,"interval to update chart in milliseconds")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"width"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,'"80%"'),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,"type"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,'"area"'),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,"url"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null),(0,r.kt)("td",null,"complete url to fetch and update data")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"parseFunction"),(0,r.kt)("td",null,"function"),(0,r.kt)("td",null),(0,r.kt)("td",null,"function that takes argument of json parsed data from url fetch and must return an array of ApexCharts specified `series` objects OR an array of pie series array + a labels array")))))}y.isMDXComponent=!0},36563:function(){},80950:function(){},46601:function(){},89214:function(){},8623:function(){},7748:function(){},85568:function(){},56619:function(){},77108:function(){},52361:function(){},94616:function(){}}]);